#include <Wire.h>
#include <RTClib.h>
#include <Encoder.h>

// === RTC ===
RTC_DS3231 rtc;

// === Encoder ===
Encoder myEnc(31, 32); // CLK, DT
const int encoderButtonPin = 33;
long lastEncPos = 0;

// === Re≈æimy ===
enum Mode { NORMAL, ADJUST_HOUR, ADJUST_MINUTE };
Mode currentMode = NORMAL;
int tempHour = 0;
int tempMinute = 0;

// === LED Piny ===
const int ledHoursTens[3] = {2, 3, 4};
const int ledHoursOnes[4] = {5, 6, 7, 8};
const int ledMinutesTens[3] = {9, 10, 11};
const int ledMinutesOnes[4] = {12, 13, 22, 23};
const int ledSecondsTens[3] = {24, 25, 26};
const int ledSecondsOnes[4] = {27, 28, 29, 30};

void setup() {
  Serial.begin(9600);
  Wire.begin();

  // === RTC Init ===
  if (!rtc.begin()) {
    Serial.println("RTC nenalezen!");
    while (1);
  }

  // rtc.adjust(DateTime(F(__DATE__), F(__TIME__))); // Prvn√≠ spu≈°tƒõn√≠

  // === LED piny jako v√Ωstup ===
  for (int i = 0; i < 3; i++) {
    pinMode(ledHoursTens[i], OUTPUT);
    pinMode(ledMinutesTens[i], OUTPUT);
    pinMode(ledSecondsTens[i], OUTPUT);
  }
  for (int i = 0; i < 4; i++) {
    pinMode(ledHoursOnes[i], OUTPUT);
    pinMode(ledMinutesOnes[i], OUTPUT);
    pinMode(ledSecondsOnes[i], OUTPUT);
  }

  // === Encoder tlaƒç√≠tko ===
  pinMode(encoderButtonPin, INPUT_PULLUP);
  myEnc.write(0);
  lastEncPos = 0;
}

void loop() {
  DateTime now = rtc.now();
  int h, m, s = now.second();

  // === Re≈æimy ===
  handleEncoderButton();

  if (currentMode == NORMAL) {
    h = now.hour();
    m = now.minute();
  } else {
    handleEncoderRotation();

    h = tempHour;
    m = tempMinute;
  }

  updateLEDs(h, m, s);
  printBinaryTable(h, m, s);
  delay(200);
}

// === P≈ôep√≠n√°n√≠ re≈æim≈Ø p≈ôes tlaƒç√≠tko ===
void handleEncoderButton() {
  static bool lastState = HIGH;
  bool currentState = digitalRead(encoderButtonPin);

  if (lastState == HIGH && currentState == LOW) {
    if (currentMode == NORMAL) {
      DateTime now = rtc.now();
      tempHour = now.hour();
      tempMinute = now.minute();
      currentMode = ADJUST_HOUR;
      Serial.println("üõ† Re≈æim: Nastavuji hodiny");
    } else if (currentMode == ADJUST_HOUR) {
      currentMode = ADJUST_MINUTE;
      Serial.println("üõ† Re≈æim: Nastavuji minuty");
    } else if (currentMode == ADJUST_MINUTE) {
      rtc.adjust(DateTime(now.year(), now.month(), now.day(), tempHour, tempMinute, now.second()));
      Serial.println("‚úÖ ƒåas nastaven. Zpƒõt do re≈æimu NORMAL.");
      currentMode = NORMAL;
    }
    myEnc.write(0);
    lastEncPos = 0;
    delay(300); // debounce
  }

  lastState = currentState;
}

// === ƒåten√≠ encoderu podle re≈æimu ===
void handleEncoderRotation() {
  long newPos = myEnc.read();
  long delta = newPos - lastEncPos;
  if (delta != 0) {
    lastEncPos = newPos;
    if (currentMode == ADJUST_HOUR) {
      tempHour = (tempHour + delta) % 24;
      if (tempHour < 0) tempHour += 24;
      Serial.print("‚è≥ Hodiny: ");
      Serial.println(tempHour);
    } else if (currentMode == ADJUST_MINUTE) {
      tempMinute = (tempMinute + delta) % 60;
      if (tempMinute < 0) tempMinute += 60;
      Serial.print("‚è≥ Minuty: ");
      Serial.println(tempMinute);
    }
  }
}

// === Rozsv√≠cen√≠ LED podle ƒçasu ===
void updateLEDs(int h, int m, int s) {
  setBinaryLEDs(h / 10, ledHoursTens, 3);
  setBinaryLEDs(h % 10, ledHoursOnes, 4);
  setBinaryLEDs(m / 10, ledMinutesTens, 3);
  setBinaryLEDs(m % 10, ledMinutesOnes, 4);
  setBinaryLEDs(s / 10, ledSecondsTens, 3);
  setBinaryLEDs(s % 10, ledSecondsOnes, 4);
}

void setBinaryLEDs(int value, const int *pins, int size) {
  for (int i = 0; i < size; i++) {
    digitalWrite(pins[i], (value >> i) & 1);
  }
}

// === V√Ωpis do s√©riov√©ho monitoru ===
void printBinaryTable(int h, int m, int s) {
  Serial.print("\nƒåas: ");
  if (h < 10) Serial.print("0");
  Serial.print(h); Serial.print(":");
  if (m < 10) Serial.print("0");
  Serial.print(m); Serial.print(":");
  if (s < 10) Serial.print("0");
  Serial.println(s);

  if (currentMode != NORMAL) {
    Serial.print("  ‚Üí Re≈æim nastaven√≠: ");
    if (currentMode == ADJUST_HOUR) Serial.println("HODINY");
    if (currentMode == ADJUST_MINUTE) Serial.println("MINUTY");
  }
}

